<?php
// $Id$

// Include features.
include_once('conglomerate.features.inc');

/**
 * Implementation of hook_autoload_info().
 */
function conglomerate_autoload_info() {
  return array(
    'ConglomerateContentResource' => array(
      'file' => 'ConglomerateContentResource.php',
    ),
    'ConglomerateContentFeedModel' => array(
      'file' => 'ConglomerateContentFeedModel.php',
    ),
    'ConglomerateUserResource' => array(
      'file' => 'ConglomerateUserResource.php',
    ),
    'ConglomerateBlockResource' => array(
      'file' => 'ConglomerateBlockResource.php',
    ),
  );
}

function conglomerate_perm() {
  return array('administer conglomerate server', 'conglomerate register subsite', 'conglomerate custom subsite url', 'conglomerate approve site');
}

function conglomerate_menu() {
  $menu = array();

  $menu['register-site'] = array(
    'title' => 'Register site',
    'file'  => 'includes/site.inc',
    'page callback' => '_conglomerate_site_register',
    'access arguments' => array('access content'),
    'type'    => MENU_NORMAL_ITEM,
  );

  $menu['admin/settings/conglomerate'] = array(
    'title'   => 'Conglomerate settings',
    'description' => 'Administer the settings for the conglomerate server',
    'file'  => 'includes/admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_conglomerate_settings'),
    'access arguments' => array('administer conglomerate server'),
    'type'    => MENU_NORMAL_ITEM,
  );

  $menu['admin/settings/conglomerate/index'] = array(
    'title' => 'Settings',
    'type'    => MENU_DEFAULT_LOCAL_TASK,
    'weight'  => -10,
  );

  $menu['admin/settings/conglomerate/hostmaster'] = array(
    'title'   => 'Hostmaster settings',
    'description' => 'Administer the settings for the conglomerate hostmaster',
    'file'  => 'includes/admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_conglomerate_hostmaster_settings'),
    'access arguments' => array('administer conglomerate server'),
    'type'    => MENU_LOCAL_TASK,
    'weight' => 9,
  );

  $menu['admin/settings/conglomerate/authorization'] = array(
    'title' => 'Hostmaster authorization',
    'file'  => 'includes/admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_conglomerate_hostmaster_authorization'),
    'access arguments' => array('administer conglomerate server'),
    'type'    => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $menu;
}

function conglomerate_form_site_node_form_alter($form, $form_state) {
  $base_domain = variable_get('conglomerate_domain', '');
  $node = $form['#node'];

  $form['intro'] = array( // TODO: This text should be configurable in the admin interface. Either tt or some custom mechanism.
    '#title' => t('Introductory help text'),
    '#value' => t('Enter the following information to register a site on !domain. Once your site has been approved you will receive an email with information on how to use your new site. Everything but the site address and default language can be changed later.', array(
      '!domain' => l($base_domain, 'http://' . $base_domain),
    )),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#weight' => -20,
  );

  $domain = isset($node->conglomerate_domain) ? $node->conglomerate_domain : '';
  $custom_domain = FALSE;
  if (strpos($domain, $base_domain) !== FALSE) {
    $domain = drupal_substr($domain, 0, drupal_strlen($domain) - drupal_strlen($base_domain) - 1);
  }
  if (!empty($node->conglomerate_site_id)) {
    $form['conglomerate_site_id'] = array(
      '#type' => 'value',
      '#value' => $node->conglomerate_site_id
    );
  }

  $custom_domain = strpos($domain, '.');
  $form['conglomerate_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Preferred site adress'),
    '#description' => $custom_domain ? t('The domain for your site') : t('Ie. yourname.' . variable_get('conglomerate_domain', 'domain.com') . '. Max 20 charactes, only a-z and 0-9.'),
    '#default_value' => $domain,
    '#size' => 20,
    '#maxlength' => 30,
    '#field_suffix' => $custom_domain ? '' : '.' . $base_domain,
    '#disabled' => !empty($node->conglomerate_site_id) || ($custom_domain && !user_access('conglomerate custom subsite url')),
  );
  $form['conglomerate_domain']['#required'] = !$form['conglomerate_domain']['#disabled'];

  $form['title']['#description'] = t('This will be used as a header for your site.');
  $form['body_field']['body']['#description'] = t('The site description is displayed in lists when you search for keywords or explore the tags. It\'s also taken into account by the editors when they approve new sites, so take some time to produce a good, concise description.');

  if (empty($node->conglomerate_site_id)) {
    if (user_access('administer conglomerate server')) {
      $form['conglomerate_devel_platform'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use the devel platform'),
        '#default_value' => 0,
        '#descriptions' => t('This will deploy the site on the devel platform'),
      );
    }
  }

  $default_languages = variable_get('conglomerate_default_languages', array());
  $lang_options = array();
  $edit_mode = FALSE;
  if ($node->nid) {
    $edit_mode = TRUE;
  }
  $default_lang_options = array();
  foreach (language_list() as $lang => $info) {
    $lang_options[$lang] = t($info->name);
    $default_lang_options[$lang] = t($info->name);
  }

  $form['enabled_languages'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select the languages you want on your site '),
    '#description' => t('Set default language below'),
    '#options' => $lang_options,
    '#default_value' => $edit_mode ? $node->enabled_languages : $default_languages,
    '#disabled' => !empty($node->conglomerate_site_id),
  );

  global $language;
  $form['default_language'] = array(
    '#type' => 'select',
    '#title' => t('Default language'),
    '#description' => t('The default language for the site'),
    '#options' => $default_lang_options,
    '#default_value' => $edit_mode ? $node->default_language : $language->language,
    '#disabled' => !empty($node->conglomerate_site_id),
  );

  $form['terms_of_use_text'] = array(
    '#title' => '',
    '#value' => l(t('Terms of Use'), 'terms', array(attributes => array('target' => '_blank'))),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#weight' => 30,
  );

  $form['terms_of_use_accepted'] = array(
    '#type' => 'checkbox',
    '#title' => t('I\'ve read and accepted the terms of use'),
    '#default_value' => 0,
    '#weight' => 31,
  );

  $form['donetext'] = array(
    '#value' => t('Use the map above to specify a position and, if you want, an area that your site is about.<br /><br />Click Save to send your registration to us for review. You will receive an email as soon as your site is approved.'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
    '#weight' => 50,
  );

  $form['simple_geo']['simple_geo_position']['#required'] = TRUE;

  // Get rid of node form cruft
  $form['body_field']['teaser_js']['#access'] = FALSE;
  $form['body_field']['teaser_include']['#access'] = FALSE;
  $form['body_field']['format']['#access'] = FALSE;
  $form['buttons']['preview']['#access'] = FALSE;
}

function _conglomerate_site_register_validate($node) {
  if (empty($node->conglomerate_site_id)) {
    if (empty($node->conglomerate_domain)) {
      form_set_error('conglomerate_domain', t('You have to provide a domain'));
    }

    if (!$node->terms_of_use_accepted && !user_access('conglomerate approve site')) {
      form_set_error('terms_of_use_accepted', t('You have to accept the terms of use to create a site at domain.com.'));
    }

    $base_domain = variable_get('conglomerate_domain', '');
    $domain = $node->conglomerate_domain;
    if (strpos($domain, $base_domain) !== FALSE) {
      $domain = drupal_substr($domain, 0, drupal_strlen($domain) - drupal_strlen($base_domain) - 1);
    }
    if (!preg_match('/^[0-9a-z]+$/', $node->conglomerate_domain) && !(user_access('conglomerate custom subsite url') && preg_match('/^[0-9a-z\.]+$/', $node->conglomerate_domain))) {
      form_set_error('conglomerate_domain', t('The subdomain name may only contain lowercase characters from a to z.'));
    }
    else {
      if (strpos($domain, '.') === FALSE) {
        $domain .= '.' . $base_domain;
      }
      $reserved = drupal_strtolower(variable_get('conglomerate_reserved_subdomains', ''));
      if (!empty($reserved)) {
        $reserved = split("\n", $reserved);
        foreach ($reserved as $r) {
          $r .= '.' . variable_get('conglomerate_domain', '');
          if (drupal_strtolower($r) == $domain) {
            form_set_error('conglomerate_domain', t('The domain "!domain" is reserved and may not be registered.', array(
              '!domain' => $domain,
            )));
          }
        }
      }

      // Check that the subdomain hasn't been taken
      $exists = db_result(db_query("SELECT domain FROM {conglomerate_source} WHERE domain = '%s' AND nid != %d", array(
        ':domain' => $domain,
        ':nid' => $node->nid,
      )));
      if (!empty($exists)) {
        form_set_error('conglomerate_domain', t('The domain "!domain" has already been registered.', array(
          '!domain' => $domain,
        )));
      }
    }

    $languages = language_list();
    if (!$node->enabled_languages[$node->default_language]) {
      form_set_error('enabled_languages', t('You must enable !language if you want to use it as you site\'s default language.', array(
        '!language' => $languages[$node->default_language]->native,
      )));
    }
  }
}

/**
 * Implementation of hook_services_resources().
 */
function conglomerate_services_resources() {
  $res = array(
    // Conglomerate resource
    'conglomerate-content' => ServicesOop::definitionFromClass('ConglomerateContentResource'),
    'conglomerate-user' => ServicesOop::definitionFromClass('ConglomerateUserResource'),
    'conglomerate-block' => ServicesOop::definitionFromClass('ConglomerateBlockResource'),
  );
  return $res;
}

/**
 * Implementation of hook_default_oauth_common_context().
 */
function conglomerate_default_oauth_common_context() {
  $contexts = array();

  $context = new stdClass;
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->name = 'conglomerate_login';
  $context->title = 'Conglomerate login';
  $context->authorization_options = array(
    'automatic_authorization' => TRUE,
    'access_token_lifetime' => '120',
    'page_title' => 'Login to @appname',
    'message' => 'Hi @user! Click on the "login" button to log in to @appname.',
    'warning' => 'Click here if you didn\'t ask to be logged in to @appname.',
    'deny_access_title' => 'Cancel',
    'grant_access_title' => 'Login',
    'disable_auth_level_selection' => 1,
    'signature_methods' => array(
      '0' => 'HMAC-SHA1',
      '1' => 'HMAC-SHA256',
      '2' => 'HMAC-SHA384',
      '3' => 'HMAC-SHA512',
    ),
    'default_authorization_levels' => array(
      '0' => 'user_info',
    ),
  );
  $context->authorization_levels = array(
    'user_info' => array(
      'name' => 'user_info',
      'title' => 'Yes, I want to log in to @appname as @user',
      'description' => 'This will log you in to @appname and give it access to details like your username and email, but not to your password.',
      'default' => 1,
      'delete' => 0,
    ),
  );
  $contexts[$context->name] = $context;

  $context = new stdClass;
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->name = 'conglomerate';
  $context->title = 'Conglomerate';
  $context->authorization_options = array(
    'access_token_lifetime' => 1200,
    'signature_methods' => array(
      '0' => 'HMAC-SHA1',
      '1' => 'HMAC-SHA256',
      '2' => 'HMAC-SHA384',
      '3' => 'HMAC-SHA512',
    ),
    'default_authorization_levels' => array(
      '0' => '*',
    ),
  );
  $context->authorization_levels = array(
    '*' => array(
      'name' => '*',
      'title' => 'Yes, I want to connect @appname to @sitename',
      'description' => 'This will allow your site @appname to push content to @sitename',
      'default' => 1,
      'delete' => 0,
    ),
  );
  $contexts[$context->name] = $context;
  return $contexts;
}

/**
 * Implementation of hook_default_services_endpoint().
 */
function conglomerate_default_services_endpoint() {
  $endpoints = array();

  $endpoint = new stdClass;
  $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
  $endpoint->name = 'conglomerate_login';
  $endpoint->title = 'Conglomerate login API';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'login-api';
  $endpoint->authentication = array(
    'services_oauth' => array(
      'oauth_context' => 'conglomerate_login',
    ),
  );
  $endpoint->resources = array(
    'conglomerate-user' => array(
      'alias' => 'user',
      'actions' => array(
        'info' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'token',
            'authorization' => 'user_info',
          ),
        ),
      ),
    ),
  );
  $endpoints[$endpoint->name] = $endpoint;

  $endpoint = new stdClass;
  $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
  $endpoint->name = 'conglomerate';
  $endpoint->title = 'Conglomerate API';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'api';
  $endpoint->authentication = array(
    'services_oauth' => array(
      'oauth_context' => 'conglomerate',
    )
  );
  $endpoint->resources = array(
    'conglomerate-block' => array(
      'alias' => 'block',
      'operations' => array(
        'index' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'none',
            'authorization' => 'read',
          ),
        ),
      ),
    ),
    'conglomerate-content' => array(
      'alias' => 'content',
      'operations' => array(
        'create' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'token',
            'authorization' => '*',
          ),
        ),
        'retrieve' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'unsigned_consumer',
            'authorization' => 'read',
          ),
        ),
        'update' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'token',
            'authorization' => '*',
          ),
        ),
        'delete' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'token',
            'authorization' => '*',
          ),
        ),
        'index' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'unsigned_consumer',
            'authorization' => 'read',
          ),
        ),
      ),
    ),
    'conglomerate-user' => array(
      'alias' => 'user',
      'operations' => array(),
      'actions' => array(
        'roleUpdate' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'token',
            'authorization' => '*',
          ),
        ),
      ),
    ),
    'simplegeosearch' => array(
      'alias' => 'geosearch',
      'operations' => array(
        'index' => array(
          'enabled' => 1,
          'preprocess' => array('_conglomerate_modify_solr_search'),
          'services_oauth' => array(
            'credentials' => 'unsigned_consumer',
            'authorization' => 'read',
          ),
        ),
      ),
    ),
    'solr' => array(
      'alias' => 'search',
      'operations' => array(
        'index' => array(
          'enabled' => 1,
          'services_oauth' => array(
            'credentials' => 'unsigned_consumer',
            'authorization' => 'read',
          ),
        ),
      ),
    ),
  );
  $endpoints[$endpoint->name] = $endpoint;

  return $endpoints;
}

/**
 * Custom sort function to sort sites by role
 */
function _conglomerate_rolesort($a, $b) {
    // Defines role hierarchy
    $roles = array(
      'authenticated user' => 0,
      'editor' => 1,
      'admin' => 2,
    );

    if ($roles[$a->role] == $roles[$b->role]) {
      return 0;
    }

    return ($roles[$a->role] > $roles[$b->role]) ? 1 : -1;
}

/**
 * Implementation of hook_nodeapi().
 */
function conglomerate_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type != 'site') { // All node types except site
    $update = NULL;
    switch ($op) {
      case 'update':
      case 'insert':
        if (isset($node->conglomerate_source)) {
          $exists = db_result(db_query("SELECT COUNT(nid) FROM {conglomerate_node_source} WHERE nid=%d", array(
            ':nid' => $node->nid,
          )));
          $update = $exists ? array('nid') : array();
          $record = array(
            'nid' => $node->nid,
            'sid' => $node->conglomerate_source,
            'duplicate_of' => isset($node->conglomerate_duplicate_of) ? $node->conglomerate_duplicate_of : 0,
            'metadata' => $node->conglomerate_metadata,
          );
          drupal_write_record('conglomerate_node_source', $record, $update);
        }
      break;
      case 'load':
        $info = db_fetch_object(db_query("SELECT sid, duplicate_of, metadata FROM {conglomerate_node_source}
          WHERE nid = %d",
            array(
              ':nid' => $node->nid,
        )));
        if ($info) {
          return array(
            'conglomerate_source' => $info->sid,
            'conglomerate_duplicate_of' => $info->duplicate_of,
            'conglomerate_metadata' => $info->metadata ? unserialize($info->metadata) : NULL,
          );
        }
        break;
    }
  }
  else { // Site nodes
    $update = NULL;
    switch ($op) {
      case 'update':
        $update = array('nid');
      case 'insert':
        if (empty($node->conglomerate_site_id)) {
          $domain = $node->conglomerate_domain;
          if (strpos($domain, '.') === FALSE) {
            $domain .= '.' . variable_get('conglomerate_domain', '');
          }
          $node->conglomerate_domain = $domain;

          if ($node->status) {
            require_once('includes/site.inc');
            $node->conglomerate_site_id = _conglomerate_site_register_submit($node);
          }
          // Save the source record for the site
          $record = array();
          if ($node->nid) {
            $record['nid'] = $node->nid;
          }
          if (isset($node->conglomerate_domain)) {
            $record['domain'] = $node->conglomerate_domain;
          }
          if (isset($node->conglomerate_site_id)) {
            $record['sid'] = $node->conglomerate_site_id;
          }
          if (isset($node->conglomerate_oauth_consumer)) {
            $record['oauth_consumer'] = $node->conglomerate_oauth_consumer;
          }
          if (isset($node->default_language)) {
            // Prevent writing of unchecked languages to database.
            if (is_array($node->enabled_languages)) {
              foreach ($node->enabled_languages as $key => $value) {
                if (empty($value)) {
                  unset($node->enabled_languages[$key]);
                }
              }
            }
            $config = array(
              'enabled_languages' => $node->enabled_languages,
              'default_language' => $node->default_language,
            );
            $record['config'] = $config;
          }

          drupal_write_record('conglomerate_source', $record, $update);
        }
        break;
      case 'load':
        // Load tags
        $tags = taxonomy_node_get_terms_by_vocabulary($node, variable_get('conglomorate_tag_vocabulary', 0));
        $tagsArray = array();
        foreach ($tags as $tag) {
          $tagsArray[] = $tag->name;
        }
        $tags = array();
        $tags[variable_get('conglomorate_tag_vocabulary', 0)] = join(', ', $tagsArray);

        $info = db_fetch_object(db_query("SELECT sid, domain, oauth_consumer, config FROM {conglomerate_source}
          WHERE nid = %d",
            array(
              ':nid' => $node->nid,
        )));
        if ($info) {
          $config = unserialize($info->config);
          // Prevent reading of unchecked languages from database.
          if (is_array($config['enabled_languages'])) {
            foreach ($config['enabled_languages'] as $key => $value) {
              if (empty($value)) {
                unset($config['enabled_languages'][$key]);
              }
            }
          }
          return array(
            'conglomerate_site_id' => $info->sid,
            'conglomerate_domain' => $info->domain,
            'conglomerate_oauth_consumer' => $info->oauth_consumer,
            'default_language' => $config['default_language'],
            'enabled_languages' => $config['enabled_languages'],
            'taxonomy' => array('tags' => $tags),
          );
        }
        break;
      case 'validate':
        _conglomerate_site_register_validate($node);
        break;
      case 'delete':
        if (!empty($node->conglomerate_oauth_consumer)) {
          DrupalOAuthConsumer::deleteConsumer($node->conglomerate_oauth_consumer);
        }
        db_query('DELETE FROM {conglomerate_source} WHERE nid = %d', array(
          ':nid' => $node->nid,
        ));
        // TODO: Unpublish the aggregated nodes?
    }
  }
}

function conglomerate_source_load($sid) {
  return db_fetch_object(db_query("SELECT * FROM {conglomerate_source}
    WHERE sid = %d", array(
      ':sid' => $sid,
  )));
}

/**
 * Loads source information when given a oauth consumer object or key.
 *
 * @param mixed $consumer
 *  A DrupalOAuthConsumer consumer key
 * @return void
 */
function conglomerate_source_from_consumer($consumer) {
  if (is_object($consumer)) {
    $consumer = $consumer->key;
  }
  return db_fetch_object(db_query("SELECT * FROM {conglomerate_source}
    WHERE oauth_consumer = '%s'", array(
      ':oauth_consumer' => $consumer,
  )));
}

/**
 * Implementation of hook_apachesolr_update_index().
 */
function conglomerate_apachesolr_update_index(&$doc, $node) {
  if (isset($node->conglomerate_source)) {
    $doc->addField('is_conglomerate_source', $node->conglomerate_source);
    $doc->addField('is_conglomerate_duplicate_of', $node->conglomerate_duplicate_of);
  }
}

function _conglomerate_modify_solr_search(&$args, &$controller) {
  $oauth_consumer = services_get_server_info('oauth_consumer');
  if ($oauth_consumer) {
    $source = conglomerate_source_from_consumer($oauth_consumer);
    if ($source) {
      $p = $args[3];
      if (!empty($p['inside_area']) && $p['inside_area'] == 'yes') {
        $has_area = db_result(db_query("SELECT nid FROM {simple_geo_area}
          WHERE nid = %d AND type='node'", array(
              ':nid' => $source->nid,
            )));
        // Disregard the inside_area parameter if the source haven't defined
        // an area.
        if ($has_area) {
          $args[0] .= ' AND im_simple_geo_area:' . $source->nid;
        }
      }
      if (!empty($p['local_content'])) {
        switch ($p['local_content']) {
          case 'only':
            $args[0] .= ' AND is_conglomerate_source:' . $source->sid;
            break;
          case 'exclude':
            $args[0] .= ' AND -is_conglomerate_source:' . $source->sid;
        }
      }
    }
  }
}
