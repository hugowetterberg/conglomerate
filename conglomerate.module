<?php
// $Id$

/**
 * Implementation of hook_autoload_info().
 */
function conglomerate_autoload_info() {
  return array(
    'ConglomerateContentResource' => array(
      'file' => 'ConglomerateContentResource.php',
    ),
    'ConglomerateContentFeedModel' => array(
      'file' => 'ConglomerateContentFeedModel.php',
    ),
    'ConglomerateUserResource' => array(
      'file' => 'ConglomerateUserResource.php',
    ),
  );
}

function conglomerate_perm() {
  return array('administer conglomerate server', 'conglomerate register subsite', 'conglomerate custom subsite url', 'conglomerate approve site');
}

function conglomerate_menu() {
  $menu = array();

  $menu['register-site'] = array(
    'title' => 'Register site',
    'file'  => 'includes/site.inc',
    'page callback' => '_conglomerate_site_register',
    'access arguments' => array('access content'),
    'type'    => MENU_NORMAL_ITEM,
  );

  $menu['admin/settings/conglomerate'] = array(
    'title'   => 'Conglomerate settings',
    'description' => 'Administer the settings for the conglomerate server',
    'file'  => 'includes/admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_conglomerate_settings'),
    'access arguments' => array('administer conglomerate server'),
    'type'    => MENU_NORMAL_ITEM,
  );

  $menu['admin/settings/conglomerate/index'] = array(
    'title' => 'Settings',
    'type'    => MENU_DEFAULT_LOCAL_TASK,
    'weight'  => -10,
  );

  $menu['admin/settings/conglomerate/hostmaster'] = array(
    'title'   => 'Hostmaster settings',
    'description' => 'Administer the settings for the conglomerate hostmaster',
    'file'  => 'includes/admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_conglomerate_hostmaster_settings'),
    'access arguments' => array('administer conglomerate server'),
    'type'    => MENU_LOCAL_TASK,
    'weight' => 9,
  );

  $menu['admin/settings/conglomerate/authorization'] = array(
    'title' => 'Hostmaster authorization',
    'file'  => 'includes/admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_conglomerate_hostmaster_authorization'),
    'access arguments' => array('administer conglomerate server'),
    'type'    => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $menu;
}

function conglomerate_form_site_node_form_alter($form, $form_state) {
  $base_domain = variable_get('conglomerate_domain', '');
  $node = $form['#node'];

  $form['intro'] = array( // TODO: This text should be configurable in the admin interface. Either tt or some custom mechanism.
    '#title' => t('Introductory help text'),
    '#value' => t('Enter the following information to start a site at !domain. When your site has been approved you\'ll get an email with your credentials and a login link', array(
      '!domain' => $base_domain,
    )),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );

  $domain = isset($node->conglomerate_domain) ? $node->conglomerate_domain : '';
  $custom_domain = FALSE;
  if (strpos($domain, $base_domain) !== FALSE) {
    $domain = drupal_substr($domain, 0, drupal_strlen($domain) - drupal_strlen($base_domain) - 1);
  }
  if (!empty($node->conglomerate_site_id)) {
    $form['conglomerate_site_id'] = array(
      '#type' => 'value',
      '#value' => $node->conglomerate_site_id
    );
  }

  $custom_domain = strpos($domain, '.');
  $form['conglomerate_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Desired subdomain'),
    '#description' => $custom_domain ? t('The domain for your site') : t('The subdomain for your site'),
    '#default_value' => $domain,
    '#size' => 20,
    '#maxlength' => 20,
    '#field_suffix' => $custom_domain ? '' : '.' . $base_domain,
    '#disabled' => !empty($node->conglomerate_site_id) || ($custom_domain && !user_access('conglomerate custom subsite url')),
  );
  $form['conglomerate_domain']['#required'] = !$form['conglomerate_domain']['#disabled'];

  if (empty($node->conglomerate_site_id)) {
    if (user_access('administer conglomerate server')) {
      $form['conglomerate_devel_platform'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use the devel platform'),
        '#default_value' => 0,
        '#descriptions' => t('This will deploy the site on the devel platform'),
      );
    }
  }

  $default_languages = variable_get('conglomerate_default_languages', array());
  $lang_options = array();
  $default_lang_options = array();
  foreach (language_list() as $lang => $info) {
    $lang_options[$lang] = $info->name;
    if (!empty($default_languages[$lang])) {
      $default_lang_options[$lang] = $info->name;
    }
  }

  $form['enabled_languages'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled languages'),
    '#description' => t('Select the languages that you want to use on your site'),
    '#options' => $lang_options,
    '#default_value' => $default_languages,
    '#disabled' => !empty($node->conglomerate_site_id),
  );

  $form['default_language'] = array(
    '#type' => 'select',
    '#title' => t('Default language'),
    '#description' => t('The default language for the site'),
    '#options' => $default_lang_options,
    '#default_value' => $language->language,
    '#disabled' => !empty($node->conglomerate_site_id),
  );

  if (!user_access('conglomerate approve site')) {
    $form['terms_of_use_text'] = array( // TODO: This text should be configurable in the admin interface. Either tt or some custom mechanism.
      '#title' => t('Terms of use text'),
      '#value' => 'Placeholder for a short terms of use text',
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );

    $form['terms_of_use_accepted'] = array(
      '#type' => 'checkbox',
      '#title' => t('I\'ve read and accepted the terms of use'),
      '#default_value' => 0,
    );
  }

  // Get rid of node form cruft
  $form['body_field']['teaser_js']['#access'] = FALSE;
  $form['body_field']['teaser_include']['#access'] = FALSE;
  $form['body_field']['format']['#access'] = FALSE;
  $form['buttons']['preview']['#access'] = FALSE;
}

function _conglomerate_site_register_validate($node) {
  if (empty($node->conglomerate_site_id)) {
    if (empty($node->conglomerate_domain)) {
      form_set_error('conglomerate_subdomain', t('You have to provide a domain'));
    }

    if (!$node->terms_of_use_accepted && !user_access('conglomerate approve site')) {
      form_set_error('terms_of_use_accepted', t('You have to accept the terms of use to create a site at skane.com.'));
    }

    $base_domain = variable_get('conglomerate_domain', '');
    $domain = $node->conglomerate_domain;
    if (strpos($domain, $base_domain) !== FALSE) {
      $domain = drupal_substr($domain, 0, drupal_strlen($domain) - drupal_strlen($base_domain) - 1);
    }
    if (!preg_match('/^[0-9a-z]+$/', $node->conglomerate_domain) && !(user_access('conglomerate custom subsite url') && preg_match('/^[0-9a-z\.]+$/', $node->conglomerate_domain))) {
      form_set_error('conglomerate_subdomain', t('The subdomain name may only contain lowercase characters from a to z.'));
    }
    else {
      if (strpos($domain, '.') === FALSE) {
        $domain .= '.' . $base_domain;
      }
      $reserved = drupal_strtolower(variable_get('conglomerate_reserved_subdomains', ''));
      if (!empty($reserved)) {
        $reserved = split("\n", $reserved);
        foreach ($reserved as $r) {
          $r .= '.' . variable_get('conglomerate_domain', '');
          if (drupal_strtolower($r) == $domain) {
            form_set_error('conglomerate_subdomain', t('The domain "!domain" is reserved and may not be registered.', array(
              '!domain' => $domain,
            )));
          }
        }
      }

      // Check that the subdomain hasn't been taken
      $exists = db_result(db_query("SELECT domain FROM {conglomerate_source} WHERE domain = '%s' AND nid != %d", array(
        ':domain' => $domain,
        ':nid' => $node->nid,
      )));
      if (!empty($exists)) {
        form_set_error('subdomain', t('The domain "!domain" has already been registered.', array(
          '!domain' => $domain,
        )));
      }
    }

    $languages = language_list();
    if (!$node->enabled_languages[$node->default_language]) {
      form_set_error('enabled_languages', t('You must enable !language if you want to use it as you site\'s default language.', array(
        '!language' => $languages[$node->default_language]->native,
      )));
    }
  }
}

/**
 * Implementation of hook_services_resources().
 */
function conglomerate_services_resources() {
  $res = array(
    // Conglomerate resource
    'conglomerate-content' => ServicesOop::definitionFromClass('ConglomerateContentResource'),
    'conglomerate-user' => ServicesOop::definitionFromClass('ConglomerateUserResource'),
  );
  return $res;
}

/**
 * Implementation of hook_oauth_default_contexts().
 */
function conglomerate_oauth_default_contexts() {
  return array(
    'conglomerate_login' => array(
      'name' => 'Conglomerate login',
      'title' => 'Login to !appname',
      'message' => 'Hi !user, !appname has asked us whether you want to be logged in to !appname',
      'warning' => 'Click here if you didn\'t ask to be logged in to !appname, or if you don\'t want to login anymore.',
      'authorization_title' => 'Login as !user',
      'access_token_lifetime' => 120,
      'authorization_levels' => array(
        'user_info' => array(
          'title' => 'Yes, I want to log in to !appname as !user',
          'description' => 'This will log you in to !appname and give it access to details like your username and email, but not to your password.',
        ),
      )
    ),
    'conglomerate' => array(
      'name' => 'Conglomerate',
      'authorization_levels' => array(
        '*' => array(
          'title' => 'Yes, I want to connect !appname to !sitename',
          'description' => 'This will allow your site !appname to push content to !sitename',
          'weight' => -1,
        ),
        'read' => array(
          'title' => 'I want to connect, but just to get stuff from !sitename',
          'description' => 'This will allow !appname to fetch content from !sitename, but it will not allow any information to be pushed to !sitename.',
          'weight' => 0,
        ),
      ),
    )
  );
}

/**
 * Implementation of hook_services_endpoints().
 */
function conglomerate_services_endpoints() {
  return array(
    'conglomerate_login' => array(
      'title' => 'Conglomerate login API',
      'server' => 'rest_server',
      'path' => 'login-api',
      'authentication' => 'services_oauth',
      'authentication_settings' => array(
        'oauth_context' => 'conglomerate_login',
      ),
      'resources' => array(
        'conglomerate-user' => array(
          'alias' => 'user',
          'actions' => array(
            'info' => array(
              'enabled' => TRUE,
              'oauth_credentials' => 'token',
              'oauth_authorization' => 'user_info',
            ),
          ),
        ),
      ),
    ),
    'conglomerate' => array(
      'title' => 'Conglomerate API',
      'server' => 'rest_server',
      'path' => 'api',
      'authentication' => 'services_oauth',
      'authentication_settings' => array(
        'oauth_context' => 'conglomerate',
      ),
      'resources' => array(
        'conglomerate-content' => array(
          'alias' => 'content',
          'operations' => array(
            'create' => array(
              'enabled' => TRUE,
              'oauth_credentials' => 'token',
              'oauth_authorization' => '*',
            ),
            'retrieve' => array(
              'enabled' => TRUE,
              'oauth_credentials' => 'unsigned_consumer',
              'oauth_authorization' => 'read',
            ),
            'update' => array(
              'enabled' => TRUE,
              'oauth_credentials' => 'token',
              'oauth_authorization' => '*',
            ),
            'delete' => array(
              'enabled' => TRUE,
              'oauth_credentials' => 'token',
              'oauth_authorization' => '*',
            ),
            'index' => array(
              'enabled' => TRUE,
              'oauth_credentials' => 'unsigned_consumer',
              'oauth_authorization' => 'read',
            ),
          ),
        ),
        'solr' => array(
          'alias' => 'search',
          'operations' => array(
            'index' => array(
              'enabled' => TRUE,
              'preprocess' => '_conglomerate_modify_solr_search',
              'oauth_credentials' => 'unsigned_consumer',
              'oauth_authorization' => 'read',
            ),
          )
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function conglomerate_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type != 'site') { // All node types except site
    $update = NULL;
    switch ($op) {
      case 'update':
        $update = array('nid');
      case 'insert':
        if (isset($node->conglomerate_source)) {
          $record = array(
            'nid' => $node->nid,
            'sid' => $node->conglomerate_source,
            'duplicate_of' => isset($node->conglomerate_duplicate_of) ? $node->conglomerate_duplicate_of : 0,
          );
          drupal_write_record('conglomerate_node_source', $record, $update);
        }
      break;
      case 'load':
        $info = db_fetch_object(db_query("SELECT sid, duplicate_of FROM {conglomerate_node_source}
          WHERE nid = %d",
            array(
              ':nid' => $node->nid,
        )));
        if ($info) {
          return array(
            'conglomerate_source' => $info->sid,
            'conglomerate_duplicate_of' => $info->duplicate_of,
          );
        }
        break;
    }
  }
  else { // Site nodes
    $update = NULL;
    switch ($op) {
      case 'update':
        $update = array('nid');
      case 'insert':
        if (empty($node->conglomerate_site_id)) {
          $domain = $node->conglomerate_domain;
          if (strpos($domain, '.') === FALSE) {
            $domain .= '.' . variable_get('conglomerate_domain', '');
          }
          $node->conglomerate_domain = $domain;

          if ($node->status) {
            require_once('includes/site.inc');
            $node->conglomerate_site_id = _conglomerate_site_register_submit($node);
          }
          // Save the source record for the site
          $record = array();
          if ($node->nid) {
            $record['nid'] = $node->nid;
          }
          if (isset($node->conglomerate_domain)) {
            $record['domain'] = $node->conglomerate_domain;
          }
          if (isset($node->conglomerate_site_id)) {
            $record['sid'] = $node->conglomerate_site_id;
          }
          if (isset($node->conglomerate_oauth_consumer)) {
            $record['oauth_consumer'] = $node->conglomerate_oauth_consumer;
          }

          drupal_write_record('conglomerate_source', $record, $update);
        }
        break;
      case 'load':
        $info = db_fetch_object(db_query("SELECT sid, domain, oauth_consumer FROM {conglomerate_source}
          WHERE nid = %d",
            array(
              ':nid' => $node->nid,
        )));
        if ($info) {
          return array(
            'conglomerate_site_id' => $info->sid,
            'conglomerate_domain' => $info->domain,
            'conglomerate_oauth_consumer' => $info->oauth_consumer,
          );
        }
        break;
      case 'validate':
        _conglomerate_site_register_validate($node);
        break;
      case 'delete':
        if (!empty($node->conglomerate_oauth_consumer)) {
          DrupalOAuthConsumer::deleteConsumer($node->conglomerate_oauth_consumer);
        }
        db_query('DELETE FROM {conglomerate_source} WHERE nid = %d', array(
          ':nid' => $node->nid,
        ));
        // TODO: Unpublish the aggregated nodes?
    }
  }
}

/**
 * Loads source information when given a oauth consumer object or key.
 *
 * @param mixed $consumer
 *  A DrupalOAuthConsumer consumer key
 * @return void
 */
function conglomerate_source_from_consumer($consumer) {
  if (is_object($consumer)) {
    $consumer = $consumer->key;
  }
  return db_fetch_object(db_query("SELECT * FROM {conglomerate_source}
    WHERE oauth_consumer = '%s'", array(
      ':oauth_consumer' => $consumer,
  )));
}

/**
 * Implementation of hook_apachesolr_update_index().
 */
function conglomerate_apachesolr_update_index(&$doc, $node) {
  if (isset($node->conglomerate_source)) {
    $doc->addField('is_conglomerate_source', $node->conglomerate_source);
    $doc->addField('is_conglomerate_duplicate_of', $node->conglomerate_duplicate_of);
  }
}

function _conglomerate_modify_solr_search(&$parameters) {
  // Do stuff to enforce sensible restrictions
}

/**
 * Test blocks
 */
function conglomerate_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array(
        'featured' => array(
          'info'    => 'TEST Featured',
          'region'  => 'belowcontent',
          'weight'  => 0,
        ),
        'tags' => array(
          'info'    => 'TEST Tags',
          'region'  => 'belowcontent',
          'weight'  => 10,
        ),
        'flickr' => array(
          'info'    => 'TEST Flickr',
          'region'  => 'widecontent',
          'weight'  => 0,
        ),

        // Lists
        'hotels' => array(
          'info'    => 'TEST Popular Hotels',
          'region'  => 'lists',
          'weight'  => 0,
        ),
        'see' => array(
          'info'    => 'TEST Seeworthy',
          'region'  => 'lists',
          'weight'  => 10,
        ),
        'restaurants' => array(
          'info'    => 'TEST Restaurant',
          'region'  => 'lists',
          'weight'  => 20,
        ),
        'blog' => array(
          'info'    => 'TEST Latest blog',
          'region'  => 'lists',
          'weight'  => 30,
        ),

        // Footer stuff
        'logo' => array(
          'info'    => 'TEST Footer Logo',
          'region'  => 'footer_one',
          'weight'  => 0,
        ),
        'orgnr' => array(
          'info'    => 'TEST Footer Org',
          'region'  => 'footer_two',
          'weight'  => 0,
        ),
        'contact' => array(
          'info'    => 'TEST Footer Contact',
          'region'  => 'footer_three',
          'weight'  => 0,
        ),
        'meta' => array(
          'info'    => 'TEST Footer Meta',
          'region'  => 'footer_four',
          'weight'  => 0,
        ),

        // Header stuff
        'language' => array(
          'info'    => 'TEST Language select',
          'region'  => 'header_left',
          'weight'  => 0,
        ),
        'invest' => array(
          'info'    => 'TEST Skåne links',
          'region'  => 'header_rights',
          'weight'  => 0,
        ),
      );

      return $blocks;

    // Render blocks
    case 'view':
      // Wich block?
      switch ($delta) {
        case 'featured':
          return array('content' => '<img src="' . url(drupal_get_path('theme', 'skane')) . '/gfx/remove_this.jpg" alt="" class="test_image" />');

        case 'tags':
          return array('content' => '<div class="tags"><h3>Etiketter</h3>
    <a href="#">Lorem</a>
    <a href="#">ipsum</a>
    <a href="#">dolor</a>
    <a href="#">consectetur</a>
    <a href="#">sit</a>
    <a href="#">amet</a>
    <a href="#">adipisicing</a>
    <a href="#">elit</a>
    <a href="#">sed</a>
    <a href="#">do</a>
    <a href="#">eiusmod</a>
    <a href="#">tempor</a>
    <a href="#">incididunt</a>
    <a href="#">labore</a>
    <a href="#">Lorem</a>
    <a href="#">ipsum</a>
    <a href="#">dolor</a>
    <a href="#">consectetur</a>
    <a href="#">sit</a>
    <a href="#">amet</a>
    <a href="#">adipisicing</a>
    <a href="#">elit</a>
    <a href="#">sed</a>
    <a href="#">do</a>
    <a href="#">eiusmod</a>
    <a href="#">tempor</a>
    <a href="#">incididunt</a>
    <a href="#">labore</a>
    <a href="#">eiusmod</a>
    <a href="#">tempor</a>
    <a href="#">incididunt</a>
    <a href="#">labore</a>
    <a href="#">Lorem</a>
    <a href="#">ipsum</a>
    <a href="#">dolor</a>
    <a href="#">consectetur</a>
    <a href="#">sit</a>
    <a href="#">amet</a>
    <a href="#">adipisicing</a>
    <a href="#">elit</a>
    <a href="#">sed</a>
    <a href="#">do</a>
    <a href="#">eiusmod</a>
    <a href="#">tempor</a>
    <a href="#">incididunt</a>
    <a href="#">labore</a>
</div>');

        case 'hotels':
          return array('title' => 'Populära hotel', 'content' => '<ol>   <li><a href="#">Grand Hotel</a></li>   <li><a href="#">Örenäs Slott Hotell &amp; konferens och en lång mening</a></li>   <li><a href="#">Hotel Lundia</a></li>   <li><a href="#">First Hotel Jörgen Kock</a></li>   <li><a href="#">Radison SAS Hotel</a></li>   <li><a href="#">Hotel Kärnan</a></li>   <li><a href="#">First Hotel Planetstaden</a></li>   <li><a href="#">Kiviks Hotell</a></li>   <li><a href="#">Hilton Malmö City</a></li>   <li><a href="#">Hotel Plaza</a></li> </ol>');

        case 'see':
          return array('title' => 'Populära sevärdheter', 'content' => '<ol>   <li><a href="#">Skånes Djurpark</a></li>   <li><a href="#">Ystad Djurpark</a></li>   <li><a href="#">Tropikariet Helsingborg</a></li>   <li><a href="#">Tosselilla Sommarland</a></li>   <li><a href="#">Botaniska Trädgården</a></li>   <li><a href="#">Skanörs Fiskrögeri</a></li>   <li><a href="#">Kulturbolaget - KB</a></li>   <li><a href="#">Ales Stenar</a></li>   <li><a href="#">Glimmingehus</a></li>   <li><a href="#">Terrariet Reptilcenter</a></li> </ol>');

        case 'restaurants':
          return array('title' => 'Populära restauranger', 'content' => '<ol>   <li><a href="#">Lagmark Gastronomi</a></li>   <li><a href="#">Cade le fil du Rasoir</a></li>   <li><a href="#">Smaka</a></li>   <li><a href="#">Bloom In the Park</a></li>   <li><a href="#">Torso Twisted</a></li>   <li><a href="#">Vendel du Sturehof</a></li>   <li><a href="#">Årstiderna</a></li>   <li><a href="#">Mento</a></li>   <li><a href="#">Mrs Brown</a></li>   <li><a href="#">La Roche</a></li> </ol>');

        case 'blog':
          return array('title' => 'Nyligen bloggat', 'content' => '<ul>
  <li>
    <span><strong>Hammenhög</strong> skriver:</span>
    <h4><a href="#">Hammenhögs Gästgivaregård</a></h4>
  </li>
  <li>
    <span><strong>Fråga om etikett</strong> skriver:</span>
    <h4><a href="#">Grå Helgonört</a></h4>
  </li>
  <li>
    <span><strong>The Lodge</strong> skriver:</span>
    <h4><a href="#">American är nya temat</a></h4>
  </li>
  <li>
    <span><strong>Zam Zam</strong> skriver:</span>
    <h4><a href="#">Gratis föreläsning på Zam Zam</a></h4>
  </li>
  <li>
    <span><strong>Torekov hotell</strong> skriver:</span>
    <h4><a href="#">Guldkant i tillvaron</a></h4>
  </li>
</ul>');

        case 'logo':
          return array('title' => '', 'content' => 'TOURISM IN SKÅNE LOGO ETC');

        case 'orgnr':
          return array('title' => 'Tourism in Skåne AB', 'content' => 'Org.nr: 556750-6398');

        case 'contact':
          return array('title' => 'Kontakta oss', 'content' => 'Tourism in Skåne AB<br /> Stortorget 9, SE-211 22 Malmö<br /> Tel. +46 (0)40-623 98 00<br /> tourism@skane.com');

        case 'meta':
          return array('title' => '', 'content' => '<h3>   <img src="/sites/default/themes/skane/gfx/rss.jpg" alt="RSS" />Prenumerera &mdash; RSS </h3> <ul>   <li><a href="#">Användarvillkor</a></li>   <li><a href="#">PUL Personuppgiftslagen</a></li>   <li><a href="#">Vi använder cookies</a></li> </ul>');

        case 'language':
          return array('title' => 'Språk', 'content' => '<ul><li class="active"><a href="#">På svenska</a></li><li><a href="#">In English</a></li><li><a href="#">vers le français</a></li><li><a href="#">Español</a></li><li><a href="#">Tyska</a></li><li><a href="#">Esperanto</a></li></ul>');

        case 'invest':
          return array('title' => '', 'content' => '<ul><li><a href="#"><strong>event</strong> in skåne</a></li><li><a href="#"><strong>invest</strong> in skåne</a></li></ul>');
      }
      break;
  }
}